"const dbconnection = parameter1; const { devicebusiness, blockdevicedata, blockbusiness, devicetypeEnum, blockdevicedatamodel, prdatabusiness, } = parameter2; const { log, lodash, startOfDay, endOfDay, parse, differenceInMinutes, differenceInDays, format, util, XLSX, res, fs, } = parameter3; let { startdate, enddate, reportinfo } = parameter4; startdate = new Date(startdate).getTime(); enddate = new Date(enddate).getTime(); let overalldata = []; const checkdifference = (device) => { let availability = 0; if ( device.parameters.CTRL_BOX_TRGT_ANG1 && device.parameters.CTRL_BOX_ACTUAL_ANG1 ) { const value1 = typeof device.parameters.CTRL_BOX_TRGT_ANG1 == 'string' ? 0 : device.parameters.CTRL_BOX_TRGT_ANG1; const value2 = typeof device.parameters.CTRL_BOX_ACTUAL_ANG1 == 'string' ? 0 : device.parameters.CTRL_BOX_ACTUAL_ANG1; availability = isNaN( Math.abs(parseFloat(value1.toFixed(2))) - Math.abs(parseFloat(value2.toFixed(2))) ) ? 0 : parseFloat( Math.abs(parseFloat(value1.toFixed(2))) - Math.abs(parseFloat(value2.toFixed(2))) ).toFixed(2); } return parseFloat(availability); }; const blockid = '8f578594-d436-42b1-bfa3-757db0cb188a'; const blockinfo = JSON.parse( JSON.stringify(await blockbusiness.showblock(dbconnection, blockid)) ); let devices = await devicebusiness.showdevicebydeviceid(dbconnection, 14); devices = devices.filter((f) => f.blockid === blockid); let listofdevices = {}; let devicefilterquery = { localstarttimestamp: 1 }; devices.map((x) => { let deviceinfo = { [x.deviceid]: x.devicedisplayname }; Object.assign(listofdevices, deviceinfo); let d = { [`devices.${x.deviceid}`]: 1 }; devicefilterquery = { ...devicefilterquery, ...d }; }); const stream = blockdevicedatamodel(dbconnection) .find( { localstarttimestamp: { $gte: startdate, $lte: enddate, }, }, { ...devicefilterquery } ) .lean() .cursor(); stream.on('data', (data) => { let tempstarttimestamp = { Timestamp: format(new Date(data.localstarttimestamp), 'yyyy-MM-dd hh:mm'), }; let sheetdata = {}; let spc = {}; if (Object.values(data.devices).length > 0) { Object.assign(sheetdata, tempstarttimestamp); Object.entries(data.devices).map((x) => { if (x[1].devicemeta.devicetypeid == 14) { const availability = checkdifference(x[1]); let devdaa = { [listofdevices[x[0]]]: { target: x[1].parameters.CTRL_BOX_TRGT_ANG1, actual: x[1].parameters.CTRL_BOX_ACTUAL_ANG1, deviation: availability, }, }; Object.assign(spc, devdaa); } }); overalldata.push({ date: format(new Date(data.localstarttimestamp), 'yyyy-MM-dd hh:mm'), spc: spc, }); } }); stream.on('close', () => { const groupheader = (spc) => { let spcs = ''; for (let i = 0; i < spc.length; i++) { spcs += `<td colspan=3 style='border:1px solid '>${spc[i]}</td>`; } return `<tr> <td rowspan='2' style='border:1px solid '>Date</td> ${spcs} </tr>`; }; const rowheader = (spc) => { let rows = ''; for (let i = 0; i < spc.length; i++) { rows += `<td style='border:1px solid '>Actual</td> <td style='border:1px solid '>POS</td> <td style='border:1px solid '>Value</td>`; } return `<tr style='border:1px solid '>${rows}</tr>`; }; const row = (datarow) => { let columns = `<td style='border:1px solid '>${datarow.date}</td>`; const dataentries = Object.entries(datarow.spc); for (let i = 0; i < dataentries.length; i++) { columns += `<td style='border:1px solid '>${dataentries[i][1].target}</td> <td style='border:1px solid '>${dataentries[i][1].actual}</td> <td style='border:1px solid '>${dataentries[i][1].deviation}</td>`; } return `<tr style='border:1px solid '> ${columns} </tr>`; }; const build = () => { let table = ''; overalldata.forEach((rowdata) => { table = table + groupheader(Object.keys(rowdata.spc)) + rowheader(Object.keys(rowdata.spc)) + row(rowdata); }); return `<table style='border:1px solid '>${table}</table>`; }; const html = build(); const template = (html, worksheetName = 'Sheet1') => `<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:x='urn:schemas-microsoft-com:office:excel' xmlns='http://www.w3.org/TR/REC-html40'><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheetName}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><meta http-equiv='content-type' content='text/plain; charset=UTF-8'/></head><body>${html}</body></html>`; res.setHeader( 'Content-disposition', 'attachment; filename=theDocument.xls' ); res.setHeader( 'Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ); res.write(template(html)); res.end(); });"